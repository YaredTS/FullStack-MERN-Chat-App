import mongoose from "mongoose";

const messageSchema = new mongoose.Schema(
    {
        senderId: {
            type: mongoose.Schema.Types.ObjectId, //store unique reference to another document
            ref: "User", // reference to the user model
            required: true,
        },
        receiverId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
            required: true,
        },
        text: {
            type: String,  // text and images will be type of sting but they are not going to be required because some messages could be only text or image or both
        },
        image: {
            type: String,
        },
    },
    {timestamps: true}

);

const Message = mongoose.model("Message", messageSchema);

export default Message;


// mongoose.Schema.Types.ObjectId:
// ObjectId is a special type in MongoDB that is used as the default identifier for documents in a collection. It's a unique 12-byte identifier generated by MongoDB for each document.

// In Mongoose, mongoose.Schema.Types.ObjectId tells Mongoose that the field is going to store an ObjectId, which is MongoDB's way of uniquely identifying each document.

// ref: "User":
// When you write ref: "User", you're telling Mongoose that the senderId and receiverId fields are not just simple ObjectIds; they refer to the User collection.

// This means that MongoDB will store the ObjectId of a user in these fields. But, thanks to the ref, Mongoose knows that these ObjectIds represent users in the User collection.

// So, when you store a message document, the senderId and receiverId will be the ObjectIds of users. These ObjectIds act as pointers to actual documents in the User collection, not just random strings or numbers.